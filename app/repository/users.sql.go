// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package repository

import (
	"context"
)

const checkUserIsExisting = `-- name: CheckUserIsExisting :one
select exists(
    select 1 from users
    where username = $1
)
`

func (q *Queries) CheckUserIsExisting(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserIsExisting, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listUsers = `-- name: ListUsers :many
select
    username
from users
where removed_at is null
`

func (q *Queries) ListUsers(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
