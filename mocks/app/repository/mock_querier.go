// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockrepository

import (
	context "context"

	repository "github.com/gatsu420/mary/app/repository"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CheckFoodIsRemoved provides a mock function with given fields: ctx, id
func (_m *MockQuerier) CheckFoodIsRemoved(ctx context.Context, id int32) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckFoodIsRemoved")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CheckFoodIsRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckFoodIsRemoved'
type MockQuerier_CheckFoodIsRemoved_Call struct {
	*mock.Call
}

// CheckFoodIsRemoved is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) CheckFoodIsRemoved(ctx interface{}, id interface{}) *MockQuerier_CheckFoodIsRemoved_Call {
	return &MockQuerier_CheckFoodIsRemoved_Call{Call: _e.mock.On("CheckFoodIsRemoved", ctx, id)}
}

func (_c *MockQuerier_CheckFoodIsRemoved_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_CheckFoodIsRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_CheckFoodIsRemoved_Call) Return(_a0 bool, _a1 error) *MockQuerier_CheckFoodIsRemoved_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CheckFoodIsRemoved_Call) RunAndReturn(run func(context.Context, int32) (bool, error)) *MockQuerier_CheckFoodIsRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUserIsExisting provides a mock function with given fields: ctx, username
func (_m *MockQuerier) CheckUserIsExisting(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserIsExisting")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CheckUserIsExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserIsExisting'
type MockQuerier_CheckUserIsExisting_Call struct {
	*mock.Call
}

// CheckUserIsExisting is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockQuerier_Expecter) CheckUserIsExisting(ctx interface{}, username interface{}) *MockQuerier_CheckUserIsExisting_Call {
	return &MockQuerier_CheckUserIsExisting_Call{Call: _e.mock.On("CheckUserIsExisting", ctx, username)}
}

func (_c *MockQuerier_CheckUserIsExisting_Call) Run(run func(ctx context.Context, username string)) *MockQuerier_CheckUserIsExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_CheckUserIsExisting_Call) Return(_a0 bool, _a1 error) *MockQuerier_CheckUserIsExisting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CheckUserIsExisting_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockQuerier_CheckUserIsExisting_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvent provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateEvent(ctx context.Context, arg []repository.CreateEventParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []repository.CreateEventParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []repository.CreateEventParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []repository.CreateEventParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type MockQuerier_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []repository.CreateEventParams
func (_e *MockQuerier_Expecter) CreateEvent(ctx interface{}, arg interface{}) *MockQuerier_CreateEvent_Call {
	return &MockQuerier_CreateEvent_Call{Call: _e.mock.On("CreateEvent", ctx, arg)}
}

func (_c *MockQuerier_CreateEvent_Call) Run(run func(ctx context.Context, arg []repository.CreateEventParams)) *MockQuerier_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]repository.CreateEventParams))
	})
	return _c
}

func (_c *MockQuerier_CreateEvent_Call) Return(_a0 int64, _a1 error) *MockQuerier_CreateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateEvent_Call) RunAndReturn(run func(context.Context, []repository.CreateEventParams) (int64, error)) *MockQuerier_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFood provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateFood(ctx context.Context, arg repository.CreateFoodParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateFood")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateFoodParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_CreateFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFood'
type MockQuerier_CreateFood_Call struct {
	*mock.Call
}

// CreateFood is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.CreateFoodParams
func (_e *MockQuerier_Expecter) CreateFood(ctx interface{}, arg interface{}) *MockQuerier_CreateFood_Call {
	return &MockQuerier_CreateFood_Call{Call: _e.mock.On("CreateFood", ctx, arg)}
}

func (_c *MockQuerier_CreateFood_Call) Run(run func(ctx context.Context, arg repository.CreateFoodParams)) *MockQuerier_CreateFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateFoodParams))
	})
	return _c
}

func (_c *MockQuerier_CreateFood_Call) Return(_a0 error) *MockQuerier_CreateFood_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CreateFood_Call) RunAndReturn(run func(context.Context, repository.CreateFoodParams) error) *MockQuerier_CreateFood_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFood provides a mock function with given fields: ctx, id
func (_m *MockQuerier) DeleteFood(ctx context.Context, id int32) (int64, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFood")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (int64, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_DeleteFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFood'
type MockQuerier_DeleteFood_Call struct {
	*mock.Call
}

// DeleteFood is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) DeleteFood(ctx interface{}, id interface{}) *MockQuerier_DeleteFood_Call {
	return &MockQuerier_DeleteFood_Call{Call: _e.mock.On("DeleteFood", ctx, id)}
}

func (_c *MockQuerier_DeleteFood_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_DeleteFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_DeleteFood_Call) Return(_a0 int64, _a1 error) *MockQuerier_DeleteFood_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_DeleteFood_Call) RunAndReturn(run func(context.Context, int32) (int64, error)) *MockQuerier_DeleteFood_Call {
	_c.Call.Return(run)
	return _c
}

// GetFood provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetFood(ctx context.Context, id int32) (repository.GetFoodRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFood")
	}

	var r0 repository.GetFoodRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (repository.GetFoodRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) repository.GetFoodRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.GetFoodRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFood'
type MockQuerier_GetFood_Call struct {
	*mock.Call
}

// GetFood is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) GetFood(ctx interface{}, id interface{}) *MockQuerier_GetFood_Call {
	return &MockQuerier_GetFood_Call{Call: _e.mock.On("GetFood", ctx, id)}
}

func (_c *MockQuerier_GetFood_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetFood_Call) Return(_a0 repository.GetFoodRow, _a1 error) *MockQuerier_GetFood_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetFood_Call) RunAndReturn(run func(context.Context, int32) (repository.GetFoodRow, error)) *MockQuerier_GetFood_Call {
	_c.Call.Return(run)
	return _c
}

// ListFood provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListFood(ctx context.Context, arg repository.ListFoodParams) ([]repository.ListFoodRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListFood")
	}

	var r0 []repository.ListFoodRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListFoodParams) ([]repository.ListFoodRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListFoodParams) []repository.ListFoodRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ListFoodRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ListFoodParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFood'
type MockQuerier_ListFood_Call struct {
	*mock.Call
}

// ListFood is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.ListFoodParams
func (_e *MockQuerier_Expecter) ListFood(ctx interface{}, arg interface{}) *MockQuerier_ListFood_Call {
	return &MockQuerier_ListFood_Call{Call: _e.mock.On("ListFood", ctx, arg)}
}

func (_c *MockQuerier_ListFood_Call) Run(run func(ctx context.Context, arg repository.ListFoodParams)) *MockQuerier_ListFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListFoodParams))
	})
	return _c
}

func (_c *MockQuerier_ListFood_Call) Return(_a0 []repository.ListFoodRow, _a1 error) *MockQuerier_ListFood_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListFood_Call) RunAndReturn(run func(context.Context, repository.ListFoodParams) ([]repository.ListFoodRow, error)) *MockQuerier_ListFood_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx
func (_m *MockQuerier) ListUsers(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockQuerier_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ListUsers(ctx interface{}) *MockQuerier_ListUsers_Call {
	return &MockQuerier_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx)}
}

func (_c *MockQuerier_ListUsers_Call) Run(run func(ctx context.Context)) *MockQuerier_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_ListUsers_Call) Return(_a0 []string, _a1 error) *MockQuerier_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListUsers_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockQuerier_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFood provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateFood(ctx context.Context, arg repository.UpdateFoodParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFood")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateFoodParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpdateFoodParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UpdateFoodParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFood'
type MockQuerier_UpdateFood_Call struct {
	*mock.Call
}

// UpdateFood is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repository.UpdateFoodParams
func (_e *MockQuerier_Expecter) UpdateFood(ctx interface{}, arg interface{}) *MockQuerier_UpdateFood_Call {
	return &MockQuerier_UpdateFood_Call{Call: _e.mock.On("UpdateFood", ctx, arg)}
}

func (_c *MockQuerier_UpdateFood_Call) Run(run func(ctx context.Context, arg repository.UpdateFoodParams)) *MockQuerier_UpdateFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.UpdateFoodParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateFood_Call) Return(_a0 int64, _a1 error) *MockQuerier_UpdateFood_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateFood_Call) RunAndReturn(run func(context.Context, repository.UpdateFoodParams) (int64, error)) *MockQuerier_UpdateFood_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
