// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockauth

import mock "github.com/stretchr/testify/mock"

// MockAuth is an autogenerated mock type for the Auth type
type MockAuth struct {
	mock.Mock
}

type MockAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuth) EXPECT() *MockAuth_Expecter {
	return &MockAuth_Expecter{mock: &_m.Mock}
}

// CheckMembership provides a mock function with given fields: registry, username
func (_m *MockAuth) CheckMembership(registry []string, username string) error {
	ret := _m.Called(registry, username)

	if len(ret) == 0 {
		panic("no return value specified for CheckMembership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string) error); ok {
		r0 = rf(registry, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuth_CheckMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMembership'
type MockAuth_CheckMembership_Call struct {
	*mock.Call
}

// CheckMembership is a helper method to define mock.On call
//   - registry []string
//   - username string
func (_e *MockAuth_Expecter) CheckMembership(registry interface{}, username interface{}) *MockAuth_CheckMembership_Call {
	return &MockAuth_CheckMembership_Call{Call: _e.mock.On("CheckMembership", registry, username)}
}

func (_c *MockAuth_CheckMembership_Call) Run(run func(registry []string, username string)) *MockAuth_CheckMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string))
	})
	return _c
}

func (_c *MockAuth_CheckMembership_Call) Return(_a0 error) *MockAuth_CheckMembership_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuth_CheckMembership_Call) RunAndReturn(run func([]string, string) error) *MockAuth_CheckMembership_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMembershipRegistry provides a mock function with given fields: users
func (_m *MockAuth) CreateMembershipRegistry(users []string) []string {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for CreateMembershipRegistry")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockAuth_CreateMembershipRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMembershipRegistry'
type MockAuth_CreateMembershipRegistry_Call struct {
	*mock.Call
}

// CreateMembershipRegistry is a helper method to define mock.On call
//   - users []string
func (_e *MockAuth_Expecter) CreateMembershipRegistry(users interface{}) *MockAuth_CreateMembershipRegistry_Call {
	return &MockAuth_CreateMembershipRegistry_Call{Call: _e.mock.On("CreateMembershipRegistry", users)}
}

func (_c *MockAuth_CreateMembershipRegistry_Call) Run(run func(users []string)) *MockAuth_CreateMembershipRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockAuth_CreateMembershipRegistry_Call) Return(_a0 []string) *MockAuth_CreateMembershipRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuth_CreateMembershipRegistry_Call) RunAndReturn(run func([]string) []string) *MockAuth_CreateMembershipRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// IssueToken provides a mock function with given fields: username
func (_m *MockAuth) IssueToken(username string) (string, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for IssueToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuth_IssueToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueToken'
type MockAuth_IssueToken_Call struct {
	*mock.Call
}

// IssueToken is a helper method to define mock.On call
//   - username string
func (_e *MockAuth_Expecter) IssueToken(username interface{}) *MockAuth_IssueToken_Call {
	return &MockAuth_IssueToken_Call{Call: _e.mock.On("IssueToken", username)}
}

func (_c *MockAuth_IssueToken_Call) Run(run func(username string)) *MockAuth_IssueToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuth_IssueToken_Call) Return(_a0 string, _a1 error) *MockAuth_IssueToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuth_IssueToken_Call) RunAndReturn(run func(string) (string, error)) *MockAuth_IssueToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: signedToken
func (_m *MockAuth) ValidateToken(signedToken string) (string, error) {
	ret := _m.Called(signedToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(signedToken)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(signedToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuth_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAuth_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - signedToken string
func (_e *MockAuth_Expecter) ValidateToken(signedToken interface{}) *MockAuth_ValidateToken_Call {
	return &MockAuth_ValidateToken_Call{Call: _e.mock.On("ValidateToken", signedToken)}
}

func (_c *MockAuth_ValidateToken_Call) Run(run func(signedToken string)) *MockAuth_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuth_ValidateToken_Call) Return(_a0 string, _a1 error) *MockAuth_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuth_ValidateToken_Call) RunAndReturn(run func(string) (string, error)) *MockAuth_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuth creates a new instance of MockAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuth {
	mock := &MockAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
