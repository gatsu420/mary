// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockfood

import (
	context "context"

	food "github.com/gatsu420/mary/app/usecases/food"
	mock "github.com/stretchr/testify/mock"
)

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

type MockUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecase) EXPECT() *MockUsecase_Expecter {
	return &MockUsecase_Expecter{mock: &_m.Mock}
}

// CreateFood provides a mock function with given fields: ctx, arg
func (_m *MockUsecase) CreateFood(ctx context.Context, arg *food.CreateFoodParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateFood")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *food.CreateFoodParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_CreateFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFood'
type MockUsecase_CreateFood_Call struct {
	*mock.Call
}

// CreateFood is a helper method to define mock.On call
//   - ctx context.Context
//   - arg *food.CreateFoodParams
func (_e *MockUsecase_Expecter) CreateFood(ctx interface{}, arg interface{}) *MockUsecase_CreateFood_Call {
	return &MockUsecase_CreateFood_Call{Call: _e.mock.On("CreateFood", ctx, arg)}
}

func (_c *MockUsecase_CreateFood_Call) Run(run func(ctx context.Context, arg *food.CreateFoodParams)) *MockUsecase_CreateFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*food.CreateFoodParams))
	})
	return _c
}

func (_c *MockUsecase_CreateFood_Call) Return(_a0 error) *MockUsecase_CreateFood_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_CreateFood_Call) RunAndReturn(run func(context.Context, *food.CreateFoodParams) error) *MockUsecase_CreateFood_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFood provides a mock function with given fields: ctx, id
func (_m *MockUsecase) DeleteFood(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFood")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_DeleteFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFood'
type MockUsecase_DeleteFood_Call struct {
	*mock.Call
}

// DeleteFood is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockUsecase_Expecter) DeleteFood(ctx interface{}, id interface{}) *MockUsecase_DeleteFood_Call {
	return &MockUsecase_DeleteFood_Call{Call: _e.mock.On("DeleteFood", ctx, id)}
}

func (_c *MockUsecase_DeleteFood_Call) Run(run func(ctx context.Context, id int32)) *MockUsecase_DeleteFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockUsecase_DeleteFood_Call) Return(_a0 error) *MockUsecase_DeleteFood_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_DeleteFood_Call) RunAndReturn(run func(context.Context, int32) error) *MockUsecase_DeleteFood_Call {
	_c.Call.Return(run)
	return _c
}

// GetFood provides a mock function with given fields: ctx, id
func (_m *MockUsecase) GetFood(ctx context.Context, id int32) (*food.GetFoodRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFood")
	}

	var r0 *food.GetFoodRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*food.GetFoodRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *food.GetFoodRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*food.GetFoodRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecase_GetFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFood'
type MockUsecase_GetFood_Call struct {
	*mock.Call
}

// GetFood is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockUsecase_Expecter) GetFood(ctx interface{}, id interface{}) *MockUsecase_GetFood_Call {
	return &MockUsecase_GetFood_Call{Call: _e.mock.On("GetFood", ctx, id)}
}

func (_c *MockUsecase_GetFood_Call) Run(run func(ctx context.Context, id int32)) *MockUsecase_GetFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockUsecase_GetFood_Call) Return(_a0 *food.GetFoodRow, _a1 error) *MockUsecase_GetFood_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecase_GetFood_Call) RunAndReturn(run func(context.Context, int32) (*food.GetFoodRow, error)) *MockUsecase_GetFood_Call {
	_c.Call.Return(run)
	return _c
}

// ListFood provides a mock function with given fields: ctx, arg
func (_m *MockUsecase) ListFood(ctx context.Context, arg *food.ListFoodParams) ([]food.ListFoodRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListFood")
	}

	var r0 []food.ListFoodRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *food.ListFoodParams) ([]food.ListFoodRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *food.ListFoodParams) []food.ListFoodRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]food.ListFoodRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *food.ListFoodParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecase_ListFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFood'
type MockUsecase_ListFood_Call struct {
	*mock.Call
}

// ListFood is a helper method to define mock.On call
//   - ctx context.Context
//   - arg *food.ListFoodParams
func (_e *MockUsecase_Expecter) ListFood(ctx interface{}, arg interface{}) *MockUsecase_ListFood_Call {
	return &MockUsecase_ListFood_Call{Call: _e.mock.On("ListFood", ctx, arg)}
}

func (_c *MockUsecase_ListFood_Call) Run(run func(ctx context.Context, arg *food.ListFoodParams)) *MockUsecase_ListFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*food.ListFoodParams))
	})
	return _c
}

func (_c *MockUsecase_ListFood_Call) Return(_a0 []food.ListFoodRow, _a1 error) *MockUsecase_ListFood_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecase_ListFood_Call) RunAndReturn(run func(context.Context, *food.ListFoodParams) ([]food.ListFoodRow, error)) *MockUsecase_ListFood_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFood provides a mock function with given fields: ctx, arg
func (_m *MockUsecase) UpdateFood(ctx context.Context, arg *food.UpdateFoodParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFood")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *food.UpdateFoodParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_UpdateFood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFood'
type MockUsecase_UpdateFood_Call struct {
	*mock.Call
}

// UpdateFood is a helper method to define mock.On call
//   - ctx context.Context
//   - arg *food.UpdateFoodParams
func (_e *MockUsecase_Expecter) UpdateFood(ctx interface{}, arg interface{}) *MockUsecase_UpdateFood_Call {
	return &MockUsecase_UpdateFood_Call{Call: _e.mock.On("UpdateFood", ctx, arg)}
}

func (_c *MockUsecase_UpdateFood_Call) Run(run func(ctx context.Context, arg *food.UpdateFoodParams)) *MockUsecase_UpdateFood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*food.UpdateFoodParams))
	})
	return _c
}

func (_c *MockUsecase_UpdateFood_Call) Return(_a0 error) *MockUsecase_UpdateFood_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_UpdateFood_Call) RunAndReturn(run func(context.Context, *food.UpdateFoodParams) error) *MockUsecase_UpdateFood_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
