// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockauthn

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

type MockUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecase) EXPECT() *MockUsecase_Expecter {
	return &MockUsecase_Expecter{mock: &_m.Mock}
}

// CreateMembershipRegistry provides a mock function with given fields: ctx
func (_m *MockUsecase) CreateMembershipRegistry(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateMembershipRegistry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_CreateMembershipRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMembershipRegistry'
type MockUsecase_CreateMembershipRegistry_Call struct {
	*mock.Call
}

// CreateMembershipRegistry is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUsecase_Expecter) CreateMembershipRegistry(ctx interface{}) *MockUsecase_CreateMembershipRegistry_Call {
	return &MockUsecase_CreateMembershipRegistry_Call{Call: _e.mock.On("CreateMembershipRegistry", ctx)}
}

func (_c *MockUsecase_CreateMembershipRegistry_Call) Run(run func(ctx context.Context)) *MockUsecase_CreateMembershipRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUsecase_CreateMembershipRegistry_Call) Return(_a0 error) *MockUsecase_CreateMembershipRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_CreateMembershipRegistry_Call) RunAndReturn(run func(context.Context) error) *MockUsecase_CreateMembershipRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
