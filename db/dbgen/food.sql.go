// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: food.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFood = `-- name: CreateFood :exec
insert into food (
    name, type_id, intake_status_id, feeder_id, location_id, remarks
) values (
    $1, $2, $3, $4, $5, $6
)
`

type CreateFoodParams struct {
	Name           string      `db:"name"`
	TypeID         int32       `db:"type_id"`
	IntakeStatusID int32       `db:"intake_status_id"`
	FeederID       int32       `db:"feeder_id"`
	LocationID     int32       `db:"location_id"`
	Remarks        pgtype.Text `db:"remarks"`
}

func (q *Queries) CreateFood(ctx context.Context, arg *CreateFoodParams) error {
	_, err := q.db.Exec(ctx, createFood,
		arg.Name,
		arg.TypeID,
		arg.IntakeStatusID,
		arg.FeederID,
		arg.LocationID,
		arg.Remarks,
	)
	return err
}

const listFood = `-- name: ListFood :many
select
    f.id,
    f.name,
    ft.name as type,
    fis.name as intake_status,
    ff.name as feeder,
    fl.name as location,
    f.remarks,
    f.created_at,
    f.updated_at
from food f
left join food_types ft on f.type_id = ft.id
left join food_intake_status fis on f.intake_status_id = fis.id
left join food_feeders ff on f.feeder_id = ff.id
left join food_locations fl on f.location_id = fl.id
where f.created_at between $1 and $2
and ($3::text is null or ft.name = $3)
`

type ListFoodParams struct {
	StartTimestamp pgtype.Timestamptz `db:"start_timestamp"`
	EndTimestamp   pgtype.Timestamptz `db:"end_timestamp"`
	Type           string             `db:"type"`
}

type ListFoodRow struct {
	ID           int32              `db:"id"`
	Name         string             `db:"name"`
	Type         pgtype.Text        `db:"type"`
	IntakeStatus pgtype.Text        `db:"intake_status"`
	Feeder       pgtype.Text        `db:"feeder"`
	Location     pgtype.Text        `db:"location"`
	Remarks      pgtype.Text        `db:"remarks"`
	CreatedAt    pgtype.Timestamptz `db:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at"`
}

func (q *Queries) ListFood(ctx context.Context, arg *ListFoodParams) ([]ListFoodRow, error) {
	rows, err := q.db.Query(ctx, listFood, arg.StartTimestamp, arg.EndTimestamp, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFoodRow
	for rows.Next() {
		var i ListFoodRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.IntakeStatus,
			&i.Feeder,
			&i.Location,
			&i.Remarks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
